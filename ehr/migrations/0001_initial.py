# Generated by Django 5.1 on 2024-08-24 09:11

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_patient', models.BooleanField(default=False)),
                ('is_medical_professional', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='ehr_user_set', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='ehr_user_set', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='MedicalProfessional',
            fields=[
                ('user', models.OneToOneField(default=None, help_text='The user that this medical professional profile belongs to.', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='medical_professional', related_query_name='medical_professional', serialize=False, to='ehr.user', verbose_name='user')),
                ('first_name', models.CharField(max_length=255, verbose_name='first name')),
                ('last_name', models.CharField(max_length=255, verbose_name='last name')),
                ('specialization', models.CharField(max_length=255, verbose_name='specialization')),
                ('contact_number', models.CharField(max_length=20, verbose_name='contact number')),
                ('email_address', models.EmailField(max_length=254, verbose_name='email address')),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('user', models.OneToOneField(default=None, help_text='The user that this patient profile belongs to.', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='patient', related_query_name='patient', serialize=False, to='ehr.user', verbose_name='user')),
                ('first_name', models.CharField(max_length=255, verbose_name='first name')),
                ('last_name', models.CharField(max_length=255, verbose_name='last name')),
                ('date_of_birth', models.DateField(verbose_name='date of birth')),
                ('gender', models.CharField(max_length=10, verbose_name='gender')),
                ('contact_number', models.CharField(max_length=20, verbose_name='contact number')),
                ('email_address', models.EmailField(max_length=254, verbose_name='email address')),
                ('address', models.TextField(verbose_name='address')),
                ('insurance_provider', models.CharField(max_length=255, verbose_name='insurance provider')),
                ('insurance_policy_number', models.CharField(max_length=255, verbose_name='insurance policy number')),
            ],
        ),
        migrations.CreateModel(
            name='VitalSigns',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='date')),
                ('time', models.TimeField(verbose_name='time')),
                ('blood_pressure', models.CharField(max_length=20, verbose_name='blood pressure')),
                ('heart_rate', models.PositiveIntegerField(verbose_name='heart rate')),
                ('temperature', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='temperature')),
                ('weight', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='weight')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ehr.patient')),
            ],
        ),
        migrations.CreateModel(
            name='MedicalImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='medical_images/', verbose_name='image')),
                ('description', models.TextField(verbose_name='description')),
                ('date', models.DateField(verbose_name='date')),
                ('uploaded_by', models.CharField(max_length=255, verbose_name='uploaded by')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ehr.patient')),
            ],
        ),
        migrations.CreateModel(
            name='MedicalHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('diagnosis', models.TextField(verbose_name='diagnosis')),
                ('allergies', models.TextField(verbose_name='allergies')),
                ('chronic_conditions', models.TextField(verbose_name='chronic conditions')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ehr.patient')),
            ],
        ),
        migrations.CreateModel(
            name='LabResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_name', models.CharField(max_length=255, verbose_name='test name')),
                ('test_result', models.CharField(max_length=255, verbose_name='test result')),
                ('date', models.DateField(verbose_name='date')),
                ('lab_technician', models.CharField(max_length=255, verbose_name='lab technician')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ehr.patient')),
            ],
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='date')),
                ('time', models.TimeField(verbose_name='time')),
                ('purpose', models.TextField(verbose_name='purpose')),
                ('medical_professional', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ehr.medicalprofessional')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ehr.patient')),
            ],
        ),
    ]
